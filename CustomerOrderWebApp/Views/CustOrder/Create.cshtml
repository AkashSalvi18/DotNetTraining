@model CustomerOrderWebApp.ViewModels.OrderFormViewModel
@using Newtonsoft.Json

<div class="container mt-4">
    <form asp-action="Create" method="post">
        <h3 class="mb-4">Customer Details</h3>

        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="Name" class="form-label">Name</label>
                <input asp-for="Name" class="form-control" placeholder="Enter name" />
            </div>
            <div class="col-md-6">
                <label asp-for="Address" class="form-label">Address</label>
                <input asp-for="Address" class="form-control" placeholder="Enter address" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label asp-for="PhoneNumber" class="form-label">Phone Number</label>
                <input asp-for="PhoneNumber" class="form-control" placeholder="Enter phone number" type="tel" />
            </div>
            <div class="col-md-6">
                <label asp-for="ModeOfPayment" class="form-label">Mode of Payment</label>
                <input asp-for="ModeOfPayment" class="form-control" placeholder="Enter mode of payment" />
            </div>
        </div>

        <hr class="my-4" />

        <h4 class="mb-3">Order Items</h4>
        <table class="table table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Item</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Cost</th>
                </tr>
            </thead>
            <tbody id="order-items-body">
                @for (int i = 0; i < Model.OrderItems.Count; i++)
                {
                    <tr>
                        <td>
                            <select name="OrderItems[@i].ItemName" class="form-select item-select" data-index="@i" onchange="fillItemDetails(@i)">
                                <option value="">-- Select Item --</option>
                                @foreach (var item in Model.AvailableItems)
                                {
                                    <option value="@item.ItemName"
                                            data-desc="@item.ItemDesc"
                                            data-price="@item.Price">
                                        @item.ItemName
                                    </option>
                                }
                            </select>
                        </td>
                        <td>
                            <input name="OrderItems[@i].ItemDesc" class="form-control item-desc" data-index="@i" readonly />
                        </td>
                        <td>
                            <input name="OrderItems[@i].Quantity" class="form-control quantity-input" type="number" min="0" step="1" data-index="@i" oninput="updateCost(@i)" />
                        </td>
                        <td>
                            <input name="OrderItems[@i].UnitPrice" class="form-control price-input" type="number" min="0" step="0.01" data-index="@i" readonly />
                        </td>
                        <td class="text-end align-middle">
                            <span id="cost-@i">0.00</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="text-end mt-3">
            <button type="button" class="btn btn-primary me-2" onclick="addItemRow()">Add Item</button>
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        let itemIndex = @Model.OrderItems.Count;

        function fillItemDetails(index) {
            const select = document.querySelector(`select[data-index='${index}']`);
            const selectedOption = select.options[select.selectedIndex];

            const desc = selectedOption.getAttribute('data-desc') || '';
            const price = selectedOption.getAttribute('data-price') || 0;

            document.querySelector(`input[data-index='${index}'].item-desc`).value = desc;
            document.querySelector(`input[data-index='${index}'].price-input`).value = price;

            updateCost(index);
        }

        function updateCost(index) {
            const quantityInput = document.querySelector(`input[data-index='${index}'].quantity-input`);
            const priceInput = document.querySelector(`input[data-index='${index}'].price-input`);
            const costDisplay = document.getElementById(`cost-${index}`);

            const quantity = parseFloat(quantityInput.value) || 0;
            const price = parseFloat(priceInput.value) || 0;

            const cost = quantity * price;
            costDisplay.textContent = cost.toFixed(2);
        }

        function addItemRow() {
            const tableBody = document.getElementById("order-items-body");

            const row = document.createElement("tr");
            row.innerHTML = `
                    <td>
                        <select name="OrderItems[${itemIndex}].ItemName" class="form-select item-select" data-index="${itemIndex}" onchange="fillItemDetails(${itemIndex})">
                            <option value="">-- Select Item --</option>
                            ${getOptionsHtml()}
                        </select>
                    </td>
                    <td>
                        <input name="OrderItems[${itemIndex}].ItemDesc" class="form-control item-desc" data-index="${itemIndex}" readonly />
                    </td>
                    <td>
                        <input name="OrderItems[${itemIndex}].Quantity" class="form-control quantity-input" type="number" min="0" step="1" data-index="${itemIndex}" oninput="updateCost(${itemIndex})" />
                    </td>
                    <td>
                        <input name="OrderItems[${itemIndex}].UnitPrice" class="form-control price-input" type="number" min="0" step="0.01" data-index="${itemIndex}" readonly />
                    </td>
                    <td class="text-end align-middle">
                        <span id="cost-${itemIndex}">0.00</span>
                    </td>
                `;
            tableBody.appendChild(row);
            itemIndex++;
        }

        function getOptionsHtml() {
            const items = @Html.Raw(JsonConvert.SerializeObject(Model.AvailableItems));
            return items.map((item) =>
                `<option value="${item.ItemName}" data-desc="${item.ItemDesc}" data-price="${item.Price}">${item.ItemName}</option>`
            ).join('');
        }
    </script>
}
